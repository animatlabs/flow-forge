name: Publish NuGet Packages

on:
  workflow_dispatch:
    inputs:
      workflowengine_version:
        description: "Version for WorkflowEngine"
        required: true
        default: "1.0.0"
      serilog_version:
        description: "Version for WorkflowEngine.Logger.Serilog"
        required: true
        default: "1.0.0"
      opentelemetry_version:
        description: "Version for WorkflowEngine.Middlewares.OpenTelemetry"
        required: true
        default: "1.0.0"

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .NET environment
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Adjust to your project's .NET version

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build the solution
      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      # Use input versions for WorkflowEngine
      - name: Set version for WorkflowEngine
        run: echo "VERSION=${{ github.event.inputs.workflowengine_version }}" >> $GITHUB_ENV

      # Use input versions for WorkflowEngine.Logger.Serilog
      - name: Set version for WorkflowEngine.Logger.Serilog
        run: echo "VERSION_SERILOG=${{ github.event.inputs.serilog_version }}" >> $GITHUB_ENV

      # Use input versions for WorkflowEngine.Middlewares.OpenTelemetry
      - name: Set version for WorkflowEngine.Middlewares.OpenTelemetry
        run: echo "VERSION_OPENTELEMETRY=${{ github.event.inputs.opentelemetry_version }}" >> $GITHUB_ENV

      # Pack and publish WorkflowEngine
      - name: Pack and publish WorkflowEngine
        shell: bash
        run: |
          PACKAGE_NAME="WorkflowEngine"
          PACKAGE_VERSION=$VERSION
          if curl --silent --fail https://api.nuget.org/v3-flatcontainer/$PACKAGE_NAME/$PACKAGE_VERSION/$PACKAGE_NAME.$PACKAGE_VERSION.nupkg; then
            echo "Package $PACKAGE_NAME version $PACKAGE_VERSION already exists on NuGet."
          else
            dotnet pack ./src/WorkflowEngine/WorkflowEngine.csproj --configuration Release --no-build --output ./nupkgs /p:Version=$PACKAGE_VERSION
            dotnet nuget push ./nupkgs/$PACKAGE_NAME.$PACKAGE_VERSION.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          fi

      # Pack and publish WorkflowEngine.Logger.Serilog
      - name: Pack and publish WorkflowEngine.Logger.Serilog
        shell: bash
        run: |
          PACKAGE_NAME="WorkflowEngine.Logger.Serilog"
          PACKAGE_VERSION=$VERSION_SERILOG
          if curl --silent --fail https://api.nuget.org/v3-flatcontainer/$PACKAGE_NAME/$PACKAGE_VERSION/$PACKAGE_NAME.$PACKAGE_VERSION.nupkg; then
            echo "Package $PACKAGE_NAME version $PACKAGE_VERSION already exists on NuGet."
          else
            dotnet pack ./src/WorkflowEngine.Logger.Serilog/WorkflowEngine.Logger.Serilog.csproj --configuration Release --no-build --output ./nupkgs /p:Version=$PACKAGE_VERSION
            dotnet nuget push ./nupkgs/$PACKAGE_NAME.$PACKAGE_VERSION.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          fi

      # Pack and publish WorkflowEngine.Middlewares.OpenTelemetry
      - name: Pack and publish WorkflowEngine.Middlewares.OpenTelemetry
        shell: bash
        run: |
          PACKAGE_NAME="WorkflowEngine.Middlewares.OpenTelemetry"
          PACKAGE_VERSION=$VERSION_OPENTELEMETRY
          if curl --silent --fail https://api.nuget.org/v3-flatcontainer/$PACKAGE_NAME/$PACKAGE_VERSION/$PACKAGE_NAME.$PACKAGE_VERSION.nupkg; then
            echo "Package $PACKAGE_NAME version $PACKAGE_VERSION already exists on NuGet."
          else
            dotnet pack ./src/WorkflowEngine.Middlewares.OpenTelemetry/WorkflowEngine.Middlewares.OpenTelemetry.csproj --configuration Release --no-build --output ./nupkgs /p:Version=$PACKAGE_VERSION
            dotnet nuget push ./nupkgs/$PACKAGE_NAME.$PACKAGE_VERSION.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          fi
